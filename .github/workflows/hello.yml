name: Hello World

on:
  push:
    branches: [ "main" ]

jobs:
  hello:
    runs-on: self-hosted
    steps:
      - name: 🧹 Stop & Remove ALL containers, networks and dangling images
        run: |
          docker stop $(docker ps -aq) || true
          docker rm $(docker ps -aq) || true
          docker network prune -f || true
          docker image prune -f || true

      - name: Checkout repository
        uses: actions/checkout@v4

      
      - name: Print Hello
        run: echo "Hello World from GitHub Actions Runner!"

      - name: Build Docker image
        run: |
          docker build . \
            --file Dockerfile \
            --tag simplebankingsystem:latest \
            --tag simplebankingsystem:$(date +%s)

      
      - name: Run Docker Hello World
        run: docker run hello-world
      
      - name: Run Docker Simple Banking System
        run: |
          docker run -d \
            --name simplebankingsystem \
            --restart unless-stopped \
            --network host \
            -p 8080:8080 \
            simplebankingsystem:latest
      
      - name: Run integration tests inside container
        run: |
          docker cp ./scripts/integration_test.sh simplebankingsystem:/integration_test.sh
          docker exec simplebankingsystem chmod +x /integration_test.sh
          docker exec simplebankingsystem /integration_test.sh          
            

      
      - name: Tag Docker image
        run: docker tag simplebankingsystem:latest 10.0.40.193:5000/team191/simplebankingsystem:latest

      - name: Push Docker image
        run: docker push 10.0.40.193:5000/team191/simplebankingsystem:latest

      - name: Build build‑stage image
        run: docker build . --target build -t simplebankingsystem-build
      
      - name: Extract compiled classes
        run: |
          container_id=$(docker create simplebankingsystem-build)
          mkdir -p target
          docker cp "$container_id":/app/target/classes ./target/classes
          docker rm "$container_id"


      - name: Run SonarQube analysis inside sonar image
        run: |
          docker run --rm \
            -e SONAR_HOST_URL=http://10.0.40.193:9000/ \
            -e SONAR_TOKEN=sqp_e21c5018f36294766e460f3e4f4891c1d12f1f97 \
            -v $(pwd):/usr/src \
            sonarsource/sonar-scanner-cli:latest \
              -Dsonar.projectKey=simplebankingsystem \
              -Dsonar.sources=. \
              -Dsonar.java.binaries=target/classes \
              -Dsonar.host.url=http://10.0.40.193:9000/ \
              -Dsonar.login=sqp_e21c5018f36294766e460f3e4f4891c1d12f1f97

      - name: Set file and folder permissions to local user
        run: |
          echo "Setting file and folder permissions in case something with user and group root was created in a previous run."
          echo "Using user and group $(id -u):$(id -g) for the whole folder."
          docker run --rm -v "${PWD}":/project bash:latest chown --recursive $(id -u):$(id -g) /project
      - uses: actions/checkout@v4
      - name: Build the documentation
        run: |
          # MkDocs richtig im gemounteten Ordner ausführen
          docker run --rm \
            -u "$(id -u):$(id -g)" \
            -v "${PWD}:/docs" \
            -w /docs \
            squidfunk/mkdocs-material \
            build -d /docs/build/site \

          echo "📂 Inhalt von build/site nach MkDocs-Build:"
          ls -R build/site
      - name: Validate build output
        run: |
          if [ ! -f build/site/doc/index.html ]; then
            echo "❌ Documentation not built! build/site/index.html is missing."
            exit 1
          fi
          echo "✅ Documentation successfully built!"

      - name: Build PDF with Pandoc (LaTeX)
        run: |
          docker run --rm \
            -v "${PWD}:/data" \
            -w /data \
            pandoc/latex:latest \
            ./docs/doc.md \
              --from gfm \
              --toc --toc-depth=3 \
              --pdf-engine=xelatex \
              -V papersize=A4 \
              -V geometry:margin=20mm \
              --metadata title="Project Documentation" \
              -o build/site/documentation.pdf
      - name: Validate PDF output
        run: |
          test -f build/site/documentation.pdf || (echo "❌ PDF nicht gefunden!"; exit 1)
          echo "✅ PDF erzeugt: build/site/documentation.pdf"

      - name: Create the container
        run: |
          # Just to be safe: Remove eventually existing images.
          docker image rm my-documentation || true

          # Build the documentation image
          docker build -f Dockerfile.nginx -t my-documentation .
          docker image ls --all
      - name: Run the documentation container
        run: |
          # Just to be safe: Stop and remove eventually existing containers.
          docker container stop mydoc || true
          docker container rm mydoc || true

          # Run the documentation image on the build agent.
          docker run --name mydoc -d --restart always -p 8081:80 my-documentation
      - name: Test the container
        run: |
          # Run the integration test from the file "integrationtest.sh" against the running documentation image.
          docker run --name docintegrationtest --network host --rm -v "${PWD}/integrationtest.sh:/integrationtest.sh:ro" ellerbrock/alpine-bash-curl-ssl bash /integrationtest.sh
      - name: Create SSH key
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > key.pem
          chmod 600 key.pem
      - name: Add production host to known_hosts
        run: |
          ssh-keyscan -H 10.0.40.191 >> known_hosts

      - name: Deploy to production
        run: |
          ssh -i key.pem -o UserKnownHostsFile=known_hosts svcgithub@10.0.40.191 '
            docker run -d --restart always -p 1911:8080 my_spring_container
            docker run -d --restart always -p 1912:80 my_doc_container
          '

