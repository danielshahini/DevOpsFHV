{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"doc/","text":"DevOps Course - Project Documentation Introduction This document captures the work completed as part of the DevOps course (024717050608). The focus of the course is to build a small application as a team of 3 people, set up continuous integration/deployment and automate supporting tasks such as documentation generation, testing and code analysis. The documentation is versioned and will evolve as the project progresses. SimpleBankingSystem-SpringBoot API Endpoints(BASE-API: /api/v1) GET /accounts - Gets all accounts GET /accounts/{name} - Gets one account by name POST /accounts - Creates one account DELETE /accounts/{name} - Deletes an account by name POST /accounts/{name}/deposit - Puts money into account POST /accounts/{name}/withdraw - Gets money from account POST /accounts/{name}/transfer - Sends money to another existing account Entities Account : - id - name - balance Setup docker run --name simpleBankingBankingSystem -e POSTGRES_USER=user -e POSTGRES_PASSWORD=password -e POSTGRES_DB=simpleBankingSystem -p 5432:5432 -d postgres docker network create my-net docker network connect my-net dein_postgres_container docker network connect my-net dein_springboot_container Account Management Frontend This is a React + Vite frontend application for managing bank accounts. It allows users to: View all accounts and their balances Create new accounts Deposit, withdraw, and transfer money The frontend communicates with a backend REST API exposed under /api/v1 . Routing: / \u2192 Accounts list /new \u2192 Create account form /accounts/:name \u2192 Account detail view Setup Clone the repository bash git clone https://github.com/danielshahini/DevOpsFHV.git cd frontend Install dependencies bash npm install Start development server bash npm run dev By default, the app runs on http://localhost:5173 . Pipeline Github-Actions workflow Docker-based \"Hello World\" workflow Prints \"Hello World from GitHub Actions Runner!\" on each pull or push to main. For more information, see hello-world:latest . Goal The goal of Lecture 2 was to set up a GitHub Actions self-hosted runner on the provided build agent and configure a first simple pipeline. Runner Setup SSH access to the build agent with the user svcgithub ssh svcgithub@<IP-ADDRESS> Runner installed via repository settings (Settings \u2192 Actions \u2192 Runners \u2192 New self-hosted runner) Configured with ./config.sh --url ... --token ... Started with ./run.sh Verified runner status in GitHub under Settings \u2192 Actions \u2192 Runners (online) Pipeline Configuration A workflow file .github/workflows/hello.yml was created: name: Hello World on: push: branches: [ \"main\" ] pull_request: branches: [ \"main\" ] jobs: hello: runs-on: self-hosted steps: - name: Checkout repository uses: actions/checkout@v4 - name: Print Hello run: echo \"Hello World from GitHub Actions Runner!\" - name: Run Docker Hello World run: docker run hello-world Result Each push or pull request to main triggers the workflow. The pipeline successfully: Checked out the repository. Printed a \"Hello World\" message. Ran the official hello-world Docker container, proving Docker integration.","title":"Home"},{"location":"doc/#devops-course-project-documentation","text":"","title":"DevOps Course - Project Documentation"},{"location":"doc/#introduction","text":"This document captures the work completed as part of the DevOps course (024717050608). The focus of the course is to build a small application as a team of 3 people, set up continuous integration/deployment and automate supporting tasks such as documentation generation, testing and code analysis. The documentation is versioned and will evolve as the project progresses.","title":"Introduction"},{"location":"doc/#simplebankingsystem-springboot","text":"","title":"SimpleBankingSystem-SpringBoot"},{"location":"doc/#api-endpointsbase-api-apiv1","text":"GET /accounts - Gets all accounts GET /accounts/{name} - Gets one account by name POST /accounts - Creates one account DELETE /accounts/{name} - Deletes an account by name POST /accounts/{name}/deposit - Puts money into account POST /accounts/{name}/withdraw - Gets money from account POST /accounts/{name}/transfer - Sends money to another existing account","title":"API Endpoints(BASE-API: /api/v1)"},{"location":"doc/#entities","text":"Account : - id - name - balance","title":"Entities"},{"location":"doc/#setup","text":"docker run --name simpleBankingBankingSystem -e POSTGRES_USER=user -e POSTGRES_PASSWORD=password -e POSTGRES_DB=simpleBankingSystem -p 5432:5432 -d postgres docker network create my-net docker network connect my-net dein_postgres_container docker network connect my-net dein_springboot_container","title":"Setup"},{"location":"doc/#account-management-frontend","text":"This is a React + Vite frontend application for managing bank accounts. It allows users to: View all accounts and their balances Create new accounts Deposit, withdraw, and transfer money The frontend communicates with a backend REST API exposed under /api/v1 .","title":"Account Management Frontend"},{"location":"doc/#routing","text":"/ \u2192 Accounts list /new \u2192 Create account form /accounts/:name \u2192 Account detail view","title":"Routing:"},{"location":"doc/#setup_1","text":"Clone the repository bash git clone https://github.com/danielshahini/DevOpsFHV.git cd frontend Install dependencies bash npm install Start development server bash npm run dev By default, the app runs on http://localhost:5173 .","title":"Setup"},{"location":"doc/#pipeline","text":"","title":"Pipeline"},{"location":"doc/#github-actions-workflow","text":"","title":"Github-Actions workflow"},{"location":"doc/#docker-based-hello-world-workflow","text":"Prints \"Hello World from GitHub Actions Runner!\" on each pull or push to main. For more information, see hello-world:latest .","title":"Docker-based \"Hello World\" workflow"},{"location":"doc/#goal","text":"The goal of Lecture 2 was to set up a GitHub Actions self-hosted runner on the provided build agent and configure a first simple pipeline.","title":"Goal"},{"location":"doc/#runner-setup","text":"SSH access to the build agent with the user svcgithub ssh svcgithub@<IP-ADDRESS> Runner installed via repository settings (Settings \u2192 Actions \u2192 Runners \u2192 New self-hosted runner) Configured with ./config.sh --url ... --token ... Started with ./run.sh Verified runner status in GitHub under Settings \u2192 Actions \u2192 Runners (online)","title":"Runner Setup"},{"location":"doc/#pipeline-configuration","text":"A workflow file .github/workflows/hello.yml was created: name: Hello World on: push: branches: [ \"main\" ] pull_request: branches: [ \"main\" ] jobs: hello: runs-on: self-hosted steps: - name: Checkout repository uses: actions/checkout@v4 - name: Print Hello run: echo \"Hello World from GitHub Actions Runner!\" - name: Run Docker Hello World run: docker run hello-world","title":"Pipeline Configuration"},{"location":"doc/#result","text":"Each push or pull request to main triggers the workflow. The pipeline successfully: Checked out the repository. Printed a \"Hello World\" message. Ran the official hello-world Docker container, proving Docker integration.","title":"Result"}]}